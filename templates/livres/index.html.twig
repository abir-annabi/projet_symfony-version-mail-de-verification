{% extends 'base.html.twig' %}

{% block title %}Galerie des Livres{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --blanc-creme: #FFF9F5;
            --beige: #F5E9E0;
            --taupe: #D8C4B6;
            --marron: #6D4C41;
            --noir: #3E2723;
            --ombre-douce: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .book-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 2rem;
            padding: 2rem;
            min-height: 60vh; /* Hauteur minimale pour éviter les sauts */
        }
        
        .book-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--ombre-douce);
            transition: all 0.3s ease;
            border: 1px solid var(--beige);
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }
        
        .book-cover {
            height: 200px;
            object-fit: cover;
            width: 100%;
            border-bottom: 1px solid var(--beige);
        }
        
        .default-cover {
            height: 200px;
            background: linear-gradient(135deg, var(--beige), var(--taupe));
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--marron);
            font-size: 3rem;
        }
        
        .book-details {
            padding: 1.5rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .book-title {
            font-size: 1.2rem;
            color: var(--noir);
            margin-bottom: 0.5rem;
            font-weight: 500;
            line-height: 1.4;
        }
        
        .book-meta {
            color: var(--marron);
            font-size: 0.9rem;
            margin-bottom: 0.3rem;
            display: flex;
            align-items: center;
        }
        
        .book-meta i {
            margin-right: 0.5rem;
            opacity: 0.7;
        }
        
        .book-price {
            font-size: 1.3rem;
            color: var(--marron);
            font-weight: 600;
            margin: 0.5rem 0;
        }
        
        .book-category {
            background: var(--beige);
            color: var(--marron);
            padding: 0.3rem 0.8rem;
            border-radius: 50px;
            font-size: 0.8rem;
            align-self: flex-start;
            margin-top: auto;
        }
        
        .book-actions {
            margin-top: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .btn-add-to-cart {
            background: var(--marron);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            font-size: 0.9rem;
        }
        
        .btn-add-to-cart:hover {
            background: var(--noir);
            transform: translateY(-2px);
        }
        
        .btn-add-to-cart i {
            margin-right: 0.5rem;
        }
        
        .page-header {
            text-align: center;
            padding: 3rem 0 1rem;
            position: relative;
        }
        
        .page-header h1 {
            color: var(--noir);
            font-weight: 400;
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        .page-header:after {
            content: "";
            display: block;
            width: 100px;
            height: 3px;
            background: var(--taupe);
            margin: 1rem auto;
        }
        
        /* Style de pagination */
        .pagination-container {
            padding: 2rem;
            display: flex;
            justify-content: center;
        }
        
        .pagination .page-item .page-link {
            color: var(--marron);
            border: 1px solid var(--taupe);
            margin: 0 3px;
            border-radius: 6px;
        }
        
        .pagination .page-item.active .page-link {
            background: var(--taupe);
            border-color: var(--taupe);
            color: white;
        }
        
        /* Styles pour la barre de recherche */
        .search-container {
            margin-bottom: 2rem;
            padding: 0 2rem;
        }
        
        #search-input {
            border-radius: 6px 0 0 6px;
            border: 1px solid var(--taupe);
            padding: 0.75rem 1rem;
            font-size: 1rem;
            color: var(--marron);
        }
        
        #search-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(109, 76, 65, 0.2);
            border-color: var(--marron);
        }
        
        #search-button {
            border-radius: 0 6px 6px 0;
            background-color: var(--marron);
            color: white;
            border: 1px solid var(--marron);
            transition: all 0.3s;
        }
        
        #search-button:hover {
            background-color: var(--noir);
            border-color: var(--noir);
        }
        
        /* Styles pour les états de chargement */
        .loading-spinner {
            animation: spin 1s linear infinite;
            width: 2rem;
            height: 2rem;
            border: 3px solid rgba(0,0,0,0.1);
            border-radius: 50%;
            border-top-color: var(--marron);
            margin: 2rem auto;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .no-results {
            text-align: center;
            padding: 3rem;
            grid-column: 1 / -1;
        }
        .bg-taupe {
    background-color: var(--taupe);
}

.btn-marron {
    background-color: var(--marron);
    color: white;
    border: none;
}

.btn-marron:hover {
    background-color: var(--noir);
}

/* Style pour les inputs */
.form-control:focus {
    border-color: var(--taupe);
    box-shadow: 0 0 0 0.25rem rgba(109, 76, 65, 0.25);
}
    </style>
{% endblock %}

{% block body %}
<div class="page-header">
    <h1><i class="bi bi-bookshelf"></i> Notre Collection</h1>
    <p>Découvrez nos œuvres littéraires sélectionnées</p>
</div>

<div class="search-container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" 
                       id="search-input" 
                       class="form-control" 
                       placeholder="Rechercher par titre, auteur, catégorie..."
                       aria-label="Rechercher">
                <button class="btn" type="button" id="search-button">
                    <i class="bi bi-search"></i> Rechercher
                </button>
            </div>
        </div>
    </div>
</div>
<div class="container mb-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-taupe text-white">
                    <i class="bi bi-funnel"></i> Filtre par prix
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-5">
                            <label for="minPrice" class="form-label">Prix minimum (DT)</label>
                            <input type="number" class="form-control" id="minPrice" placeholder="0">
                        </div>
                        <div class="col-md-5">
                            <label for="maxPrice" class="form-label">Prix maximum (DT)</label>
                            <input type="number" class="form-control" id="maxPrice" placeholder="100">
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button class="btn btn-marron w-100" id="filterPriceBtn">
                                <i class="bi bi-filter"></i> Filtrer
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="book-gallery" id="books-container">
    {% for livre in livres %}
    <div class="book-card">
        {% if livre.image %}
            <img src="{{ livre.image }}" alt="{{ livre.titre }}" class="book-cover">
        {% else %}
            <div class="default-cover">
                <i class="bi bi-book"></i>
            </div>
        {% endif %}
        
        <div class="book-details">
            <h3 class="book-title">{{ livre.titre }}</h3>
            
            <div class="book-meta">
                <i class="bi bi-pencil"></i>
                <span>{{ livre.editeur }}</span>
            </div>
            
            <div class="book-meta">
                <i class="bi bi-calendar"></i>
                <span>Publié le {{ livre.dateEdition|date("d/m/Y") }}</span>
            </div>
            
            <div class="book-price">{{ livre.prix }} DT</div>
            
            <span class="book-category">{{ livre.categorie.libelle }}</span>
            
            <div class="book-actions">
                <a href="{{ path('app_panier_add', {'id': livre.id}) }}" class="btn-add-to-cart">
                    <i class="bi bi-cart-plus"></i>
                    Ajouter
                </a>
                
                <a href="{{ path('app_livre_show', {'id': livre.id}) }}" class="text-muted">
                    <i class="bi bi-info-circle"></i>
                </a>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<div class="pagination-container">
    {{ knp_pagination_render(livres) }}
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('search-input');
            const searchButton = document.getElementById('search-button');
            const booksContainer = document.getElementById('books-container');
            const paginationContainer = document.querySelector('.pagination-container');
            const minPriceInput = document.getElementById('minPrice');
            const maxPriceInput = document.getElementById('maxPrice');
            const filterPriceBtn = document.getElementById('filterPriceBtn');
            
            async function performSearch() {
                const searchTerm = searchInput.value.trim();
                
                if (searchTerm.length === 0) {
                    window.location.reload();
                    return;
                }
                
                try {
                    // Afficher un indicateur de chargement
                    booksContainer.innerHTML = `
                        <div class="loading-container" style="grid-column: 1 / -1; text-align: center; padding: 2rem;">
                            <div class="loading-spinner"></div>
                            <p>Recherche en cours...</p>
                        </div>
                    `;
                    
                    paginationContainer.style.display = 'none';
                    
                    const response = await fetch(`{{ path('app_livre_search') }}?q=${encodeURIComponent(searchTerm)}`);
                    
                    if (!response.ok) throw new Error('Erreur réseau');
                    
                    const html = await response.text();
                    
                    booksContainer.innerHTML = html;
                    paginationContainer.style.display = 'none';
                    
                } catch (error) {
                    console.error('Erreur:', error);
                    booksContainer.innerHTML = `
                        <div class="no-results">
                            <i class="bi bi-exclamation-triangle-fill text-danger" style="font-size: 2rem;"></i>
                            <p class="text-muted">Une erreur est survenue lors de la recherche</p>
                            <button onclick="window.location.reload()" class="btn btn-outline-secondary">
                                Recharger la page
                            </button>
                        </div>
                    `;
                }
            }
            
            searchButton.addEventListener('click', performSearch);
            
            searchInput.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') performSearch();
            });
            
            // Optionnel: Recherche en temps réel avec délai
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                if (searchInput.value.length > 2) {
                    searchTimeout = setTimeout(performSearch, 500);
                }
            });
            
            //filtrage par prix
            async function filterByPrice() {
                const minPrice = minPriceInput.value;
                const maxPrice = maxPriceInput.value;

                if (!minPrice || !maxPrice) {
                    alert('Veuillez saisir les deux prix');
                    return;
                }

                if (parseFloat(minPrice) > parseFloat(maxPrice)) {
                    alert('Le prix minimum ne peut pas être supérieur au prix maximum');
                    return;
                }

                try {
                    booksContainer.innerHTML = `
                        <div class="loading-container" style="grid-column: 1 / -1; text-align: center; padding: 2rem;">
                            <div class="loading-spinner"></div>
                            <p>Filtrage en cours...</p>
                        </div>
                    `;

                    const response = await fetch(`{{ path('app_livre_filter_price') }}?minPrice=${minPrice}&maxPrice=${maxPrice}`);
                    
                    if (!response.ok) throw new Error('Erreur réseau');
                    
                    const html = await response.text();
                    booksContainer.innerHTML = html;
                    paginationContainer.style.display = 'none';
                    
                } catch (error) {
                    console.error('Erreur:', error);
                    booksContainer.innerHTML = `
                        <div class="no-results">
                            <i class="bi bi-exclamation-triangle-fill text-danger"></i>
                            <p class="text-muted">Erreur lors du filtrage</p>
                        </div>
                    `;
                }
            }

            filterPriceBtn.addEventListener('click', filterByPrice);

            // Filtrage automatique quand les deux champs sont remplis
            [minPriceInput, maxPriceInput].forEach(input => {
                input.addEventListener('change', () => {
                    if (minPriceInput.value && maxPriceInput.value) {
                        filterByPrice();
                    }
                });
            });
        });
    </script>
{% endblock %}